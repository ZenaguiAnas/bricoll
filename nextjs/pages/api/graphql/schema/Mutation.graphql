type Mutation {
    #    Cards (client)
    createProject(
        title: String! @constraint(minLength: 5, maxLength: 100)
        description: String! @constraint(minLength: 5, maxLength: 1000)
        price: Float! @constraint(min: 1, max: 100000)
        skills: [String!]! @constraint(maxItems: 5)
        projectScope: ProjectScopeInput!
        category: ProjectCategoriesEnum!
        attachments: [AttachmentInput!]
    ): Project
    editProject(
        id: ObjectID!
        title: String @constraint(minLength: 5, maxLength: 100)
        description: String @constraint(minLength: 5, maxLength: 1000)
        price: Float @constraint(min: 1, max: 100000)
        skills: [String!] @constraint(maxItems: 15)
        projectScope: ProjectScopeInput
        category: ProjectCategoriesEnum
    ): Project
    deleteProject(id: ObjectID!): queryResult
    reactToProject(id: ObjectID!,reaction_type:reaction_type!): queryResult # likeProject LoveProject
    undoReactToProject(id: ObjectID!,reaction_type:reaction_type!): queryResult #unDislikeProject , unLoveProject
    #    Proposal
    createProposal(
        project_id: ObjectID!
        price: Float! @constraint(min: 1, max: 10000)
        duration: Int! @constraint(exclusiveMin: 0, exclusiveMax: 90)
        description: String! @constraint(minLength: 5, maxLength: 1000)
        cover_letter: String! @constraint(minLength: 5, maxLength: 100000)
        attachmentsURL: [AttachmentInput]
    ): Proposal!
    editProposal(
        id: ObjectID!
        price: Float! @constraint(min: 1, max: 10000)
        duration: Int! @constraint(exclusiveMin: 0, exclusiveMax: 90)
        description: String! @constraint(minLength: 5, maxLength: 1000)
        cover_letter: String! @constraint(minLength: 5, maxLength: 100000)
    ): Proposal
    declineProposal(id: ObjectID!): Proposal
    # by the client
    cancelProposal(id: ObjectID!): Proposal
    # by the freelancer
    acceptProposal(id: ObjectID!): Proposal
    # by the client
    # todo
    # open_chat_room(id: ObjectID!): Proposal
    # by the freelancer and the client
    # acceptTerms(id: ObjectID!): Proposal
    #by the freelancer and the client
    # contract
    # the client creates a contract (hire a freelancer)
    createContract(
        freelancer_id: ObjectID!
        project_id: ObjectID!
        proposal_id: ObjectID!
        price: Float! @constraint(min: 1, max: 10000)
        duration: Int!
        terms: [String!]!  @constraint(maxItems: 15)
    ): Contract
    #    the id is of the submission id
    requestProjectSubmissionReview(contract_id: ObjectID!,title:String!,description:String!,attachments:[AttachmentInput!]): queryResult # reviews will be added inside the contract as an array of reviews
    acceptRequestProjectSubmissionReview(contract_id: ObjectID!,submission_review_id: ObjectID!): queryResult
    declineRequestProjectSubmissionReview(contract_id: ObjectID!,submission_review_id: ObjectID!): queryResult
    cancelRequestProjectSubmissionReview(contract_id: ObjectID!,submission_review_id: ObjectID!): queryResult

    #   only the freelancer can accept a contract or deny it ( the freelancer accepts by default after he creates it)
    acceptContract(id: ObjectID!): Contract
    #   only the freelancer can cancel a contract (the client only create it and can't cancel it)
    cancelContract(id: ObjectID!): Contract
    # processPayment(id: ObjectID!): Contract
    # only the client can complete a contract if the freelancer has accepted it
    #    completeContract(id: ObjectID!): Contract (transfer to a rest api)
    #    User
    editProfile(
        name: String @constraint(minLength: 3, maxLength: 20)
        email: String  @constraint(minLength: 5, format: "email")
        imageUrl: URL
        status: StatusEnum
    ): Boolean
    editPassword(oldPassword: String! @constraint(minLength: 8, maxLength: 100),  newPassword: String! @constraint(minLength: 8, maxLength: 100))  : Boolean
    deleteAccount: Boolean # todo this is complicated task (delete all the data related to the user(projects, proposals, contracts, chats, messages, notifications, etc.)) and you don't need an Id

}