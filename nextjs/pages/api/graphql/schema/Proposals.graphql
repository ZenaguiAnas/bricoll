# ! all the types may change in the future
# the project could be one of the following

enum proposal_status {
  canceled
  declined
  in_progress
  approved
}
# the proposal could be one of the following
type Proposal {
  _id: ObjectID #auto generated
  project_id: ObjectID!
  # freelancer_id: ObjectID!
  #todo from session get user_id
  price: Float! @constraint(min: 1, max: 10000)
  duration: Int! @constraint(exclusiveMin: 0, exclusiveMax: 90)
  description: String! @constraint(minLength: 5, maxLength: 1000)
  status: proposal_status!
  created_at: Date!
  # current time
  updated_at: Date!
  cover_letter: String! @constraint(minLength: 5, maxLength: 1000)
  attachmentsURL: [Attachment]
  # the link of urls of the attachments(files, images, video)
}

# Cover Letter, Attachments (images +video +files ...)

type Query {
  Proposal(id: ObjectID!): Proposal
  # by the freelancer | client
  # todo on the client
  ProposalsByFreelancer(freelancer_id: ObjectID!): [Proposal]
  # on the freelancer
  ProposalsByProject(project_id: ObjectID!): [Proposal]
  # on the client(project owner)
}

type Mutation {
  submitProposal(
    project_id: ObjectID!
    price: Float!
    duration: Int!
    description: String!
    cover_letter: String!
    attachmentsURL: [AttachmentInput]
    ackandlodement: Boolean! # the freelancer should accept the terms and conditions
  ): Proposal!
  editProposal(
    id: ObjectID!
    price: Float!
    duration: Int!
    description: String!
  ): Proposal
  declineProposal(id: ObjectID!): Proposal
  # by the client
  withdrawProposal(id: ObjectID!): Proposal
  # by the freelancer
  acceptProposal(id: ObjectID!): Proposal
  # by the client
  # todo
  # acceptProposal(id: ObjectID!): Proposal
  # # by the freelancer and the client
  # open_chat_room(id: ObjectID!): Proposal
  # by the freelancer and the client
  # acceptTerms(id: ObjectID!): Proposal
  #by the freelancer and the client
}

type Subscription {
  proposalStatusChanged(id: ObjectID!): Proposal
  # when the status of the proposal changed
  projectGotProposal(id: ObjectID!): Proposal
  # when the project got a new proposal
}
