scalar Date
scalar URL

enum size_of_project {
    SMALL
    MEDIUM
    LARGE
}

enum reaction_type{
    LOVE,
    DISLIKE
}

type reactions {
    freelancer_id:ObjectID!
    reaction_type:reaction_type!
}

input ProjectScopeInput {
    estimated_duration_in_days: Int!
    @constraint(exclusiveMin: 0, exclusiveMax: 90)
    level_of_expertise: level_of_expertise!
    size_of_project: size_of_project!
}

type ProjectScopeOutput {
    estimated_duration_in_days: Int!
    @constraint(exclusiveMin: 0, exclusiveMax: 90)
    level_of_expertise: level_of_expertise!
    size_of_project: size_of_project!
}

enum ProjectCategoriesEnum {
    WEB_DEVELOPMENT
    MOBILE_DEVELOPMENT
    DESIGN
    DATA_SCIENCE
    MARKETING
    WRITING
    OTHER
}

type ProjectStats{
    #    status_count: Int! # the count of proposals that are in progress
    #    status_type: proposal_status# the count of proposals that are approved
    declined_count: Int! # the count of proposals that are declined
    completed_count: Int! # the count of proposals that are completed
    approved_count: Int! # the count of proposals that are approved
    in_progress_count: Int! # the count of proposals that are in progress
}

type Project {
    client_id: ObjectID
    _id: ObjectID
    title: String!
    description: String!
    price: Float!
    skills: [String!]!
    reactions: [reactions!]!
    created_at: Date!
    projectScope: ProjectScopeOutput!
    attachments: [Attachment!]!
    category: ProjectCategoriesEnum!
    stats: ProjectStats #calculated by the resolver not in the database
    proposals: [Proposal!] #calculated by the resolver not in the database
}
#type ProjectWithProposals {
#    client_id: ObjectID
#    _id: ObjectID
#    title: String!
#    description: String!
#    price: Float!
#    skills: [String!]!
#    reactions: [reactions!]!
#    created_at: Date!
#    projectScope: ProjectScopeOutput!
#    attachments: [Attachment!]!
#    category: ProjectCategoriesEnum!
#    stats: ProjectStats #calculated by the resolver not in the database
#    proposals: [Proposal!] #calculated by the resolver not in the database
#}
# project with proposals and stats for client only on Project resolver
#type ProjectWithProposals{
#    client_id: ObjectID
#    _id: ObjectID
#    title: String!
#    description: String!
#    price: Float!
#    skills: [String!]!
#    reactions: [reactions!]!
#    created_at: Date!
#    projectScope: ProjectScopeOutput!
#    attachments: [Attachment!]!
#    category: ProjectCategoriesEnum!
#    stats: ProjectStats
#    proposals: [Proposal!] # proposals for this project
#}

# The "Query" type is special: it lists all of the available queries that


type queryResult {
    _id: ObjectID!
    acknowledgement: Boolean!
}
# filter options
input filterOptionsInput {
    priceMin: Float
    priceMax: Float
    category: ProjectCategoriesEnum
    skills: [String!]
}

#type ProjectSearchResult {
#    _id: ObjectID! #so you can check the project details
#    title: String! # so you can show the title
#    description: String! # so you can show the description
#    price: Float! # so you can show the price
#    skills: [String!]! # so you can show the skills
#    category: ProjectCategoriesEnum! # so you can show the category
#    projectScope: ProjectScopeOutput! # so you can show the projectScope
#    reactions: [reactions!]! # so you can show the reactions
#    created_at: Date! # so you can show the created_at
#    client_id: ObjectID! # so you can show the client_id
#    attachments: [Attachment!]! # so you can show the attachments
#    stats: ProjectStats
#}


#union ProjectResultForFreelancer = BaseProject | type SearchProjectResult{
#    client_id: ObjectID
#    _id: ObjectID
#    title: String!
#    description: String!
#    price: Float!
#    skills: [String!]!
#    reactions: [reactions!]!
#    created_at: Date!
#    projectScope: ProjectScopeOutput!
#    attachments: [Attachment!]!
#    category: ProjectCategoriesEnum!
#    stats: ProjectStats
#}
