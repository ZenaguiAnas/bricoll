# Comments in GraphQL strings (such as this one) start with the hash (#) symbol.

scalar ObjectID
scalar Date
scalar URL

enum level_of_expertise {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum size_of_project {
  SMALL
  MEDIUM
  LARGE
}

type Reactions {
  love: Int!
  dislike: Int!
}

input ProjectScopeInput {
  estimated_duration_in_days: Int!
    @constraint(exclusiveMin: 0, exclusiveMax: 90)
  level_of_expertise: level_of_expertise!
  size_of_project: size_of_project!
}

type ProjectScopeOutput {
  estimated_duration_in_days: Int!
    @constraint(exclusiveMin: 0, exclusiveMax: 90)
  level_of_expertise: level_of_expertise!
  size_of_project: size_of_project!
}

enum ProjectCategoriesEnum {
  WEB_DEVELOPMENT
  MOBILE_DEVELOPMENT
  DESIGN
  DATA_SCIENCE
  MARKETING
  WRITING
  OTHER
}
type Project {
  client_id: ObjectID
  _id: ObjectID
  title: String! @constraint(minLength: 5, maxLength: 100)
  description: String! @constraint(minLength: 5, maxLength: 1000)
  price: Float! @constraint(min: 0)
  skills: [String!]! @constraint(maxItems: 15)
  reactions: Reactions!
  created_at: Date!
  projectScope: ProjectScopeOutput!
  attachmentsURL: [Attachment]
  proposals: [Proposal] # proposals for this project
  category: ProjectCategoriesEnum!
}

# The "Query" type is special: it lists all of the available queries that

type Query {
  Projects: [Project]
  Project(id: ID!): Project
}

type queryResult {
  _id: ObjectID!
  ackandlodement: Boolean!
}
# filter options
input filterOptionsInput {
  priceMin: Float
  priceMax: Float
  category: ProjectCategoriesEnum
  skills: [String!]
}

type Mutation {
  addProject(
    title: String!
    description: String!
    price: Float!
    skills: [String!]!
    projectScope: ProjectScopeInput!
    category: ProjectCategoriesEnum!
  ): Project
  editProject(
    id: ObjectID!
    title: String
    description: String
    price: Float
    skills: [String!]
    projectScope: ProjectScopeInput
    category: ProjectCategoriesEnum
  ): Project
  deleteProject(id: ObjectID): queryResult
  loveProject(id: ObjectID): queryResult
  dislikeProject(id: ObjectID): queryResult
  unLoveProject(id: ObjectID): queryResult
  unDislikeProject(id: ObjectID): queryResult
  searchProject(query: String!, filter: filterOptionsInput): [Project]
}
