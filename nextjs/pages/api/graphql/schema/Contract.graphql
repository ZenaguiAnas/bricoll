scalar ObjectID

type Contract {
  _id: ObjectID!
  freelancer_id: ObjectID!
  client_id: ObjectID!
  project_id: ObjectID!
  proposal_id: ObjectID!
  price: Float!
  duration: Int!
  status: String!
  createdAt: Date!
  updatedAt: Date!
  terms: [String]
}
enum ContractStatus {
  PENDING # default not signed
  ACCEPTED # signed by both parties
  CANCELLED # cancelled by either party
  COMPLETED # completed by both parties
}
type Query {
  Contract(id: ObjectID!): Contract
}
type Mutation {
  # todo (implement this mutation)
  # the client creates a contract (hire a freelancer)
  createContract(
    freelancer_id: ObjectID!
    project_id: ObjectID!
    proposal_id: ObjectID!
    price: Float!
    duration: Int!
    status: ContractStatus!
    terms: [String]
  ): Contract
  # todo
  #   only the freelancer can accept a contract or deny it ( the freelancer accepts by default after he creates it)
  acceptContract(id: ObjectID!): Contract
  #   only the freelancer can cancel a contract (the client only create it and can't cancel it)
  cancelContract(_id: ObjectID!): Contract
  # processPayment(_id: ObjectID!): Contract
  # only the client can complete a contract if the freelancer has accepted it
  completeContract(_id: ObjectID!): Contract
}
